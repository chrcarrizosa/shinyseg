---
output: docusaurus-md
sidebar_position: 2
# generated from quick-start.qmd
---

```{r, include = FALSE}
library(pedtools)
library(segregatr)
source("../../R/colourbar.R")
source("../../R/contourplot.R")
knitr::opts_chunk$set(
  echo = FALSE,
  dpi = 300,
  comment = NA,
  fig.align = "center",
  fig.path = "img/"
)
```

# Quick start

Analyses with shinyseg are easy and highly flexible. All you need to do is upload a pedigree file, enter the genetic/clinical data, and specify a suitable penetrance model. The following sections briefly explain how to do so with an example case, but you can find detailed guidance within the app or in the [documentation](/how-to).

## Uploading a pedigree

The application works with pedigree files in ped format, like those created by [QuickPed](https://magnusdv.shinyapps.io/quickped). Here is an example of such a file and the corresponding family:

```{r}
x = avuncularPed(type = "maternal") |>
  addChildren(fa = 4, mo = 5, verbose = FALSE) |>
  relabel("asPlot")
df = as.data.frame(x)
print(df, row.names = FALSE)
```

```{r ped-empty, fig.height = 2.25, fig.width = 2.25, out.width="300px"}
plot(
  x,
  symbolsize = .82,
  cex = 0.7
)
```

Note that other columns may be present, but you will at least need: `id` (individual ID), `fid` (father's ID, 0 if not included in the pedigree), `mid` (mother's ID, 0 if not included in the pedigree), and `sex` (1 = male; 2 = female).

::: {.callout-tip}
You can even upload multiple families at the same time. Read [here](how-to/pedigree#multiple-families) how to do it!
:::

## Genetic and clinical data

Once a pedigree is loaded, users are presented with a table to enter the analysis data:

* __phenotype:__ free-text field to specify disease phenotypes relevant to the analysis, e.g. `affected`, `breast cancer`, etc. `nonaff` for unaffected individuals, empty if unknown.
* __carrier:__ `neg` for non-carriers, `het` for heterozygous (or hemizygous) carriers, `hom` for homozygous carriers. Empty if unknown.
* __proband:__ checkbox indicating the proband or index case.
* __age:__ integer between 1-100 specifying the age of disease onset or censoring.

For instance:

```{r}
df2 =
  data.frame(
    df,
    phenotype = c("", "", "affected", "nonaff", "nonaff", "affected", "affected"),
    carrier = c("", "", "het", "neg", "het", "het", "het"),
    proband = c("", "", "", "", "", "1", ""),
    age = c(80, 80, 40, 60, 60, 40, 40)
  )
print(df2, row.names = FALSE)
```

```{r ped-filled, fig.height = 2.25, fig.width = 2.25, out.width="300px"}
plotSegregation(
  x,
  affected = c(3, 6, 7),
  unknown = 1:2,
  carriers = c(3, 5, 6, 7),
  noncarriers = 4,
  proband = 6,
  fill = "gray30",
  labs = setNames(seq(pedsize(x)), c(80, 80, 40, 60, 60, 40, 40)),
  symbolsize = .82,
  cex = .7
)
```

::: {.callout-warning}
The app will signal if some information is wrong. Look at the requirements [here](how-to/pedigree#clinical-and-genetic-data)!
:::

## Penetrance model

The inheritance pattern combines choices for chromosome (`A`: autosomal, `X`: X-linked) and dominance (`D`: dominant, `R`: recessive, `I`: incomplete dominance). In this example we select X-linked recessive (`XR`), which will adjust other inputs accordingly.

Next, it is time to assign the probabilities of observing the analysis phenotypes conditional on carriership status. These will be hereafter referred to as penetrances, and their specification may be done in two ways:

### 1) Relative risk

A parametric version of the survival penetrances by [Belman et al. (2020)](https://doi.org/10.1038/s41436-020-0920-4). It is based on:

* __Baseline lifetime risk, mean and SD:__ the lifetime risk, mean, and standard deviation of disease onset in non-carriers and heterozygous carriers in recessive inheritance. 
* __Hazard ratios:__ the relative risks in homo-, hemi-, and heterozygous carriers in dominant inheritance, compared to the baseline. They can be either constant or age-dependent and may also be specified through a __variant-associated lifetime risk__.

For example, the following describes a constant relative risk model in which non-carrier men and heterozygous women have a lifetime risk (phenocopy rate) of 1% with onset at 70±15 years of age, while hemizygous men and homozygous women have a lifetime risk of 75%.

```{r}
df3 =
  data.frame(
    sex = c("", "sex", "both"),
    phenotype = c("", "  phenotype", "affected"),
    f0R = c("  neg/♀het", "risk", "0.01"),
    f0mu = c("", "  mean", "70"),
    f0sigma = c("", "  SD", "15"),
    f2R = c("  ♂het/hom", "risk", "0.75"),
    HR = c("", "     hazard ratio(s)", "137.93")
  )
colnames(df3) = NULL
print(df3, row.names = FALSE, right = TRUE)
```

::: {.callout-tip}
To facilitate the specification, shinyseg can also optimize these parameters based on user-provided cumulative incidence data. See [here](how-to/penetrance#relative-risk) all the possibilities!
:::

### 2) Liability class

Alternatively, users can manually define the penetrances using a table. The following represents the simplest case where there are no phenocopies, and the chance of disease onset in hemizygous men and homozygous women is 100%.

```{r}
df4 =
  data.frame(
    f0 = c("neg/♀het", "risk", "0.00"),
    f2 = c("  ♂het/hom", "risk", "1.00"),
    sex = c("", "   sex", ""),
    phenotype = c("", "  phenotype", ""),
    ages = c("", "  ages", "")
  )
colnames(df4) = NULL
print(df4, row.names = FALSE, right = TRUE)
```

More detailed specifications, dependent on sex, phenotype, and age, can be created by adding more rows and filling in these columns accordingly.

## Cosegregation evidence

Calculating the FLB is then as easy as clicking a button. For instance, with a population variant frequency of 0.001 and the simple liability class model from before, we get an `FLB = 8.00`. shinyseg reports this as supporting evidence for pathogenicity based on [Jarvik and Browning's (2016)](https://doi.org/10.1016%2Fj.ajhg.2016.04.003) thresholds.

```{r colorbar, fig.height = 0.55, fig.width = 5, out.width="300px"}
colbar +
  theme(plot.margin = margin(1.25, 1, 0.25, 1, unit = "lines"),
        axis.text.x = element_text(color = "black", size = 8.5)) +
  annotate("segment", x = 1.2, xend = 1.19, y = 8.2, yend = 8.2, linewidth = 0.35,
           arrow = arrow(type = "closed", length = unit(1, "npc")), arrow.fill = "#D6604D") +
  annotate("text", x = 4, y = 8.2, label = "Pathogenic supporting", hjust = 0.25, size = 2.5)
```

Afterward, the app opens up more possibilities, including performing sensitivity analyses to assess the robustness of your results.

::: {.callout-tip}
Take a look at the [documentation](how-to/flb#sensitivity-analyses) to explore this feature!
:::
